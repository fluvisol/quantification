!function(){globalThis.document.title="Quant";const a=t=>{var e=document.createElement("template");return e.innerHTML=t,e.content.cloneNode(!0)};var l,o,r,t=(l="root-app",o=>t=>{class e extends HTMLElement{html="";css="";constructor(){super(),this.css=`<style>:host{display:block;box-sizing:border-box}${t||""}</style>`,this.html=o,this.attachShadow({mode:"open"}),this.shadowRoot?.append(a(this.css),a(this.html))}static get tag(){return l}}return l&&globalThis.customElements.define(l,e),e})`
<sidebar class="page-sidebar">
<header class="control">
	<div class="upload-container">
		<label for="upload-input">Choose a picture:</label>

		<input
			name="upload-input"
			id="upload-input"
			type="file"
			class="upload-input"
			accept="image/png,image/jpeg"
		/>
	</div>

	<div class="control-els image-control">
		<button disabled class="rollback">rollback</button>
		<button disabled class="quantization">quantization</button>
		<button disabled class="save">save</button>
		<!--
		<fieldset class="zoom-control">
			<legend>zoom:</legend>

			<button>+</button>

			<button>-</button>
		</fieldset>
		-->
	</div>

	<div class="control-els color-control">
		<!-- boolean делать ли цвет из среднего или брать как есть -->
		<!--
		<fieldset class="color-format">
			<legend>color format:</legend>

			<label>
				<input
					type="radio"
					value="rgb"
					name="color-format"
					class="color-format-rgb"
					disabled
					checked
				/>
				<span>rgb</span>
			</label>

			<label>
				<input
					type="radio"
					value="hex"
					name="color-format"
					class="color-format-rgb"
					disabled
				/>
				<span>hex</span>
			</label>
		</fieldset>
		-->

		<!-- <button disabled class="generate-colors">generate colors</button> -->
		<!-- <button disabled class="show-colors-as-list">show colors as list</button> -->

		<!--
		<label class="copy-colors">
			<span>copy colors</span>
			<button disabled class="as-hex">as hex</button>
			<button disabled class="as-rgb">as rgb</button>
		</label>
		-->

		<label class="color-channels">
			<span>Number of default Color Channels:</span>

			<!-- @TODO Добавить сохранение параметра по умолчанию и подставлять сюда -->
			<input
				placeholder="4"
				title="Number of default Color Channels (4)"
				disabled
				class="number-of-default-color-channels"
				data-default-count="4"
				type="number"
			/>
		</label>
		<!-- тоже и сюда @TODO Добавить сохранение параметра по умолчанию и подставлять сюда
		<label class="color-addiction">
			<span>Add color to palette on click:</span>
			<input
				title="Add color to palette on select pixel"
				disabled
				class="color-addiction-on-click"
				type="checkbox"
			/>
		</label>
		-->
	</div>
</header>

<main class="palette">
	<label class="palette">
		<button disabled class="add-color-to-palette">add color to palette</button>
	</label>

	<template class="template-color-item">
		<div class="color-item selected hidden">
			<!-- доступен список для типа color и сделать такой же для текстового поля (выбор цвета) -->
			<input disabled type="color"/>
			<input type="text"/>
			<input type="button" value="x" />
		</div>
	</template>

	<div class="palette-container"></div>
</main>
</sidebar>

<main class="page-main">
<canvas class="canvas hidden" title="Click to select and copy color"></canvas>
</main>
``
:host {
display: flex;
height: 100vh;
width: 100vw;
background-color: var(--palette-color-0);
}

button, input {
border: none;
background-color: var(--color-0);
margin: 0px;
padding: 0px;
font-family: var(--font-style-0);
font-size: 1rem;
transition: color .65s ease-in-out .2s,
					background-color .65s ease-in-out .3s;
}
button {
cursor: pointer;
text-transform: uppercase;
}
input[type="color"] {
cursor: pointer;
}
input:disabled, button:disabled {
color: var(--palette-color-0);
cursor: not-allowed;
}

.page-sidebar {
background-color: var(--palette-color-1);
color: var(--palette-color-2);
padding: 1rem;
/* max-width: max(30vw, 8rem); */
max-width: min(18rem, max(30vw, 8rem));
height: calc(100vh - 2rem);
}
.page-main {
width: 100%;
border-left: 1px solid var(--palette-color-0);
overflow: auto;
cursor: progress;
}

.control {
/* padding-bottom: 1rem; */
display: flex;
flex-direction: column;
}
.palette {}
.canvas {
display: block;
cursor: crosshair;
/* height: 100%; */
/* width: 100%; */
}
.canvas.hidden {
display: none;
}

.control > * {
padding-bottom: 1rem;
}

.add-color-to-palette {
display: block;
width: 100%;
padding: 1rem;
}
.palette-container {
max-height: calc(100vh - 24rem);
overflow-y: auto;
border-top: .15rem solid var(--palette-color-2);
padding-top: 1rem;
}
/*
:host:has(.contain-image) .palette-container {
border-top-color: var(--palette-color-2);
}
*/

.upload-container {
/* padding-bottom: 1rem; */
text-align: center;
overflow: hidden;
}
.upload-input {
cursor: copy;
text-align: end;
}
.control-els {
display: flex;
justify-content: space-between;
/* align-items: flex-start; */
gap: 0.2rem;
flex-wrap: wrap;
}
.image-control {}
.color-control {}
.control-els > * {
padding: .2rem;
}


.color-item {
display: flex;
border: .2rem solid var(--palette-color-0);
gap: .2rem;
background-color: var(--palette-color-0);


animation: show-color-item 600ms 100ms cubic-bezier(0.38, 0.97, 0.56, 0.76) forwards;
opacity: 0;
/* remove transform for just a fade-in */
transform: rotateX(-90deg);
transform-origin: top center;
}
@keyframes show-color-item {
100% {
opacity: 1;
transform: none;
}
}
.color-item input[type="color"] {
width: 3rem;
}
.color-item input[type="text"] {
background-color: var(--palette-color-0);
width: 100%;
padding-left: .5rem;
}
.color-item input[type="button"]:disabled {
/* display: none; */
visibility: hidden;
}
.color-item input[type="button"] {
text-transform: lowercase;
font-weight: lighter;
font-size: 1.3rem;
display: flex;
align-content: center;
justify-content: center;
width: 3rem;
cursor: pointer;
}
.color-item.selected {
border-left-color: var(--palette-color-4);
}

.color-format {
display: flex;
justify-content: space-between;
border: .15rem solid var(--palette-color-2);
}
.color-format input[type="radio"] {
display: none;
}
.color-format input[type="radio"] ~ span {
text-transform: uppercase;
border: none;
background-color: var(--color-0);
margin: 0px;
padding: 0px;
font-family: var(--font-style-0);
font-size: 1rem;
transition: color .65s ease-in-out .2s, background-color .65s ease-in-out .3s;
cursor: pointer;
color: var(--color-11);
}
.color-format input[type="radio"]:disabled ~ span {
color: var(--palette-color-0);
cursor: not-allowed;
}
.color-format input[type="radio"]:checked:disabled ~ span {
}
.color-format input[value="rgb"] {}
.color-format input[value="hex"] {}

.generate-colors {}
.show-colors-as-list {}
.copy-colors {
/* display: flex; */
/* flex-wrap: wrap; */
}
.copy-colors span {
display: block;
user-select: none;
}
.as-hex {}
.as-rgb {}
.color-channels {
display: flex;
align-items: center;
}
.number-of-default-color-channels {
background-color: var(--palette-color-0);
width: 3rem;
text-align: center;
}
.number-of-default-color-channels:disabled {
color: var(--palette-color-1);
}
.rollback {}
.save {}
`,t=document.body.querySelector(t.tag)?.shadowRoot||document.body;o="querySelector",r=t;const d=(t,e)=>(e||r)[o](t),s=(t,...e)=>(t?.forEach?t:[t]).forEach(t=>t?.addEventListener(...e)),n=(t,e)=>Object.entries(t).forEach(t=>s(e,...t));t=(new Map).set(d(".generate-colors"),{click:t=>{}}).set(d(".as-hex"),{click:t=>{}}).set(d(".as-rgb"),{click:t=>{}}).set(d(".number-of-default-color-channels"),{onkeypress:t=>{(t=t||window.event).keyCode||t.which},change:t=>{}});class e{canvas=d(".canvas");ctx=this.canvas.getContext("2d");image;#paletteData;get paletteData(){return this.#paletteData}constructor(){}drawImage(t,e){this.image=t,this.canvas.width=t.naturalWidth,this.canvas.height=t.naturalHeight,this.ctx.drawImage(this.image,0,0),e?.(this)}rollback(t){this.drawImage(this.image),t?.()}findPosition(t){var e=0,o=0;if(!t.offsetParent)return null;for(;e+=t.offsetLeft,o+=t.offsetTop,t=t.offsetParent;);return{x:e,y:o}}cut(t,e,a,l){if(1===l)e.push(t);else{l/=2;let o=this.getMaxRangeColorIndex(t);t.sort(function(t,e){return+t[o]-+e[o]});var r=Math.floor(t.length/2),s=t.slice(0,r-1),r=t.slice(r);this.cut(s,e,a,l),this.cut(r,e,a,l)}}getColorAverages(t){let l=[];return t.forEach(t=>{let e=0,o=0,a=0;t.forEach(t=>{e+=+t[0],o+=+t[1],a+=+t[2]});t=[Math.floor(e/t.length),Math.floor(o/t.length),Math.floor(a/t.length)];l.push(t)}),l}getMaxRangeColorIndex(e){var o=e.length;let a=255,l=0,r=255,s=0,n=255,i=0;for(let t=0;t<o;t++){var c=+e[t][0],d=+e[t][1],p=+e[t][2];c<a&&(a=c),c>l&&(l=c),d<r&&(r=d),d>s&&(s=d),p<n&&(n=p),p>i&&(i=p)}var t=[[l-a,0],[s-r,1],[i-n,2]];return t.sort(function(t,e){return t[0]-e[0]}),t[t.length-1][1]}getPal(t,e){var o=t.data,a=o.length,l=[];for(let t=0;t<a;t+=4){var r=[o[t],o[t+1],o[t+2]];l.push(r)}t=[...new Set(l.map(t=>t.toString()))].map(t=>t.split(","));let s=this.getMaxRangeColorIndex(t);t.sort(function(t,e){return+t[s]-+e[s]});var n=[],t=(this.cut(t,n,t,e),this.getColorAverages(n));return t}medianCutPalette(t){var e=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height);this.ctx.createImageData(this.canvas.width,this.canvas.height);return this.getPal(e,t)}colorsRgb=new Set;infinityColorGenerator=function*(){this.image&&this.medianCutPalette(4).forEach(t=>{this.colorsRgb.add(t)}),yield*this.colorsRgb};quantization(){var t=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height),e=this.ctx.createImageData(this.canvas.width,this.canvas.height);const l=(t,e)=>Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2));const o=[];if(p.items.forEach(t=>{t=d('input[type="text"]',t)?.dataset.rgb?.split(",").map(t=>+t);t&&o.push(t)}),1<o.length){var r=o,s=t.data,n=e.data,i=s.length;for(let a=0;a<i;a+=4){let e=255,o;for(let t=0;t<r.length;t++){var c=l(r[t],[s[a],s[a+1],s[a+2]]);c<e&&(e=c,o=t)}n[a]=r[o][0],n[a+1]=r[o][1],n[a+2]=r[o][2],n[a+3]=255}this.ctx.putImageData(e,0,0)}}}class i{container;template;constructor(){this.container=d(".palette-container"),this.template=d(".color-item",d(".template-color-item").content).cloneNode(!0)}#selected;set selected(t){t?.classList.remove("hidden"),t?.classList.add("selected"),this.#selected?.item.classList.remove("selected"),this.#selected=["color","text","button"].reduce((t,e)=>(t[e]=d(`input[type="${e}"]`,t.item),t),{item:t}),this.#selected.text.focus(),this.#selected.text.select()}get selected(){return this.#selected}mountEvents(o){return Object.entries({color:{input:t=>{t.preventDefault()},change:t=>{t.preventDefault()}},text:{keydown:t=>{t.preventDefault()}},button:{click:t=>{t.preventDefault(),this.unmountItem(o)}}}).forEach(([t,e])=>n(e,d(`input[type="${t}"]`,o))),s(o,"click",()=>this.selected.item===o||(this.selected=o)),this}removeDisabled(e,t=["text","button"]){return t.forEach(t=>d(`input[type="${t}"]`,e).removeAttribute("disabled")),this}addDisabled(e,t=[,"text","button"]){return t.forEach(t=>d(`input[type="${t}"]`,e).setAttribute("disabled",!0)),this}unmountItem(t){t.remove();var e=d(".color-item",this.container);return e&&(this.selected=e),this.items["delete"](t),this}mountItem(t=this.template.cloneNode(!0)){return this.mountEvents(t),this.container.appendChild(t),this.selected=t,this.items.add(t),this}items=new Set;mountGeneratedItems(e){const i=c.infinityColorGenerator();for(let t=0;t<e;t++)setTimeout(()=>{var t=this.template.cloneNode(!0),e=i.next().value,o=d('input[type="text"]',t),a=d('input[type="color"]',t);const l=t=>{t=t.toString(16);return 1==t.length?"0"+t:t};[n,r,s]=[...e];var r,s,n="#"+l(n)+l(r)+l(s);return o.value=n,a.value=n,o.dataset.rgb=e,a.dataset.rgb=e,this.mountItem(t),this},200*t)}}var p=new i;const c=new e,u=new Image;t.set(c.canvas,{click(t){var e=c.findPosition(this),t=c.ctx.getImageData(t.pageX-e.x,t.pageY-e.y,1,1).data;const o=t=>{t=t.toString(16);return 1==t.length?"0"+t:t};[e,a,l]=[...t];var a,l,e="#"+o(e)+o(a)+o(l);p.selected.color.value=e,p.selected.text.value=e,p.selected.color.dataset.rgb=t,p.selected.text.dataset.rgb=t}}).set(u,{load:()=>c.drawImage(u,()=>{c.canvas.classList.remove("hidden"),[".rollback",".quantization",".save",".add-color-to-palette"].forEach(t=>d(t).removeAttribute("disabled"));var t=d(".number-of-default-color-channels"),t=parseInt(t.value||t.dataset.defaultCount||4);p.mountGeneratedItems(t)})}).set(d(".upload-input"),{cancel:t=>{},change:t=>{1===t.target.files.length&&(u.src=URL.createObjectURL(t.target.files[0]))}}).set(d(".rollback"),{click:t=>{c.rollback()}}).set(d(".add-color-to-palette"),{click:()=>{p.mountItem()}}).set(d(".quantization"),{click:()=>c.quantization()}).set(d(".save"),{click:t=>{var e=document.createElement("a");e.setAttribute("download","MintyPaper.png"),e.setAttribute("href",c.canvas.toDataURL("image/png").replace("image/png","image/octet-stream")),document.body.append(e),e.click(),e.remove()}}).forEach(n)}();